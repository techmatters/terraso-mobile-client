diff --git a/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js b/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js
index e9364fb..c26ef50 100644
--- a/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js
+++ b/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js
@@ -64,18 +64,20 @@ function useBackHandler({
   callback
 }) {
   (0, _react.useEffect)(() => {
+    if (!enabled) {
+      return;
+    }
+
     let backHandler = () => {
       callback();
       return true;
     };
 
-    if (enabled) {
-      _reactNative.BackHandler.addEventListener('hardwareBackPress', backHandler);
-    } else {
-      _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);
-    }
-
-    return () => _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);
+    const subscription = _reactNative.BackHandler.addEventListener('hardwareBackPress', backHandler);
+    return () => {
+      if (subscription && typeof subscription.remove === 'function') {
+        subscription.remove();
+      }
+    };
   }, [enabled, callback]);
 }
-//# sourceMappingURL=useKeyboardDismissable.js.map
\ No newline at end of file
diff --git a/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js.map b/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js.map
deleted file mode 100644
index da0dbd1..0000000
--- a/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["useKeyboardDismissable.ts"],"names":["keyboardDismissHandlers","keyboardDismissHandlerManager","push","handler","filter","h","length","pop","useKeyboardDismissable","enabled","callback","React","useEffect","cleanupFn","useBackHandler","backHandler","BackHandler","addEventListener","removeEventListener"],"mappings":";;;;;;;;AAAA;;AAEA;;;;;;AAOA,IAAIA,uBAAyC,GAAG,EAAhD;AACO,MAAMC,6BAA6B,GAAG;AAC3CC,EAAAA,IAAI,EAAGC,OAAD,IAAwB;AAC5BH,IAAAA,uBAAuB,CAACE,IAAxB,CAA6BC,OAA7B;AACA,WAAO,MAAM;AACXH,MAAAA,uBAAuB,GAAGA,uBAAuB,CAACI,MAAxB,CACvBC,CAAD,IAAOA,CAAC,KAAKF,OADW,CAA1B;AAGD,KAJD;AAKD,GAR0C;AAS3CG,EAAAA,MAAM,EAAE,MAAMN,uBAAuB,CAACM,MATK;AAU3CC,EAAAA,GAAG,EAAE,MAAM;AACT,WAAOP,uBAAuB,CAACO,GAAxB,EAAP;AACD;AAZ0C,CAAtC;AAeP;AACA;AACA;;;;AACO,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAoC;AACxEC,iBAAMC,SAAN,CAAgB,MAAM;AACpB,QAAIC,SAAS,GAAG,MAAM,CAAE,CAAxB;;AACA,QAAIJ,OAAJ,EAAa;AACXI,MAAAA,SAAS,GAAGZ,6BAA6B,CAACC,IAA9B,CAAmCQ,QAAnC,CAAZ;AACD,KAFD,MAEO;AACLG,MAAAA,SAAS;AACV;;AACD,WAAO,MAAM;AACXA,MAAAA,SAAS;AACV,KAFD;AAGD,GAVD,EAUG,CAACJ,OAAD,EAAUC,QAAV,CAVH;;AAYAI,EAAAA,cAAc,CAAC;AAAEL,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,CAAd;AACD,CAdM;;;;AAgBA,SAASI,cAAT,CAAwB;AAAEL,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAxB,EAAwD;AAC7D,wBAAU,MAAM;AACd,QAAIK,WAAW,GAAG,MAAM;AACtBL,MAAAA,QAAQ;AACR,aAAO,IAAP;AACD,KAHD;;AAIA,QAAID,OAAJ,EAAa;AACXO,+BAAYC,gBAAZ,CAA6B,mBAA7B,EAAkDF,WAAlD;AACD,KAFD,MAEO;AACLC,+BAAYE,mBAAZ,CAAgC,mBAAhC,EAAqDH,WAArD;AACD;;AACD,WAAO,MACLC,yBAAYE,mBAAZ,CAAgC,mBAAhC,EAAqDH,WAArD,CADF;AAED,GAZD,EAYG,CAACN,OAAD,EAAUC,QAAV,CAZH;AAaD","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/native-base/lib/module/hooks/useKeyboardDismissable.js b/node_modules/native-base/lib/module/hooks/useKeyboardDismissable.js
index 266ed74..f037c62 100644
--- a/node_modules/native-base/lib/module/hooks/useKeyboardDismissable.js
+++ b/node_modules/native-base/lib/module/hooks/useKeyboardDismissable.js
@@ -45,18 +45,20 @@ export function useBackHandler({
   callback
 }) {
   useEffect(() => {
+    if (!enabled) {
+      return;
+    }
+
     let backHandler = () => {
       callback();
       return true;
     };
 
-    if (enabled) {
-      BackHandler.addEventListener('hardwareBackPress', backHandler);
-    } else {
-      BackHandler.removeEventListener('hardwareBackPress', backHandler);
-    }
-
-    return () => BackHandler.removeEventListener('hardwareBackPress', backHandler);
+    const subscription = BackHandler.addEventListener('hardwareBackPress', backHandler);
+    return () => {
+      if (subscription && typeof subscription.remove === 'function') {
+        subscription.remove();
+      }
+    };
   }, [enabled, callback]);
 }
-//# sourceMappingURL=useKeyboardDismissable.js.map
\ No newline at end of file
diff --git a/node_modules/native-base/lib/module/hooks/useKeyboardDismissable.js.map b/node_modules/native-base/lib/module/hooks/useKeyboardDismissable.js.map
deleted file mode 100644
index 86e260e..0000000
--- a/node_modules/native-base/lib/module/hooks/useKeyboardDismissable.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["useKeyboardDismissable.ts"],"names":["React","useEffect","BackHandler","keyboardDismissHandlers","keyboardDismissHandlerManager","push","handler","filter","h","length","pop","useKeyboardDismissable","enabled","callback","cleanupFn","useBackHandler","backHandler","addEventListener","removeEventListener"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,cAA5B;AAOA,IAAIC,uBAAyC,GAAG,EAAhD;AACA,OAAO,MAAMC,6BAA6B,GAAG;AAC3CC,EAAAA,IAAI,EAAGC,OAAD,IAAwB;AAC5BH,IAAAA,uBAAuB,CAACE,IAAxB,CAA6BC,OAA7B;AACA,WAAO,MAAM;AACXH,MAAAA,uBAAuB,GAAGA,uBAAuB,CAACI,MAAxB,CACvBC,CAAD,IAAOA,CAAC,KAAKF,OADW,CAA1B;AAGD,KAJD;AAKD,GAR0C;AAS3CG,EAAAA,MAAM,EAAE,MAAMN,uBAAuB,CAACM,MATK;AAU3CC,EAAAA,GAAG,EAAE,MAAM;AACT,WAAOP,uBAAuB,CAACO,GAAxB,EAAP;AACD;AAZ0C,CAAtC;AAeP;AACA;AACA;;AACA,OAAO,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAoC;AACxEb,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpB,QAAIa,SAAS,GAAG,MAAM,CAAE,CAAxB;;AACA,QAAIF,OAAJ,EAAa;AACXE,MAAAA,SAAS,GAAGV,6BAA6B,CAACC,IAA9B,CAAmCQ,QAAnC,CAAZ;AACD,KAFD,MAEO;AACLC,MAAAA,SAAS;AACV;;AACD,WAAO,MAAM;AACXA,MAAAA,SAAS;AACV,KAFD;AAGD,GAVD,EAUG,CAACF,OAAD,EAAUC,QAAV,CAVH;AAYAE,EAAAA,cAAc,CAAC;AAAEH,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,CAAd;AACD,CAdM;AAgBP,OAAO,SAASE,cAAT,CAAwB;AAAEH,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAxB,EAAwD;AAC7DZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,WAAW,GAAG,MAAM;AACtBH,MAAAA,QAAQ;AACR,aAAO,IAAP;AACD,KAHD;;AAIA,QAAID,OAAJ,EAAa;AACXV,MAAAA,WAAW,CAACe,gBAAZ,CAA6B,mBAA7B,EAAkDD,WAAlD;AACD,KAFD,MAEO;AACLd,MAAAA,WAAW,CAACgB,mBAAZ,CAAgC,mBAAhC,EAAqDF,WAArD;AACD;;AACD,WAAO,MACLd,WAAW,CAACgB,mBAAZ,CAAgC,mBAAhC,EAAqDF,WAArD,CADF;AAED,GAZQ,EAYN,CAACJ,OAAD,EAAUC,QAAV,CAZM,CAAT;AAaD","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/native-base/src/hooks/useKeyboardDismissable.ts b/node_modules/native-base/src/hooks/useKeyboardDismissable.ts
index f3cfa44..fa7ec49 100644
--- a/node_modules/native-base/src/hooks/useKeyboardDismissable.ts
+++ b/node_modules/native-base/src/hooks/useKeyboardDismissable.ts
@@ -44,16 +44,20 @@ export const useKeyboardDismissable = ({ enabled, callback }: IParams) => {
 
 export function useBackHandler({ enabled, callback }: IParams) {
   useEffect(() => {
+    if (!enabled) {
+      return;
+    }
+
     let backHandler = () => {
       callback();
       return true;
     };
-    if (enabled) {
-      BackHandler.addEventListener('hardwareBackPress', backHandler);
-    } else {
-      BackHandler.removeEventListener('hardwareBackPress', backHandler);
-    }
-    return () =>
-      BackHandler.removeEventListener('hardwareBackPress', backHandler);
+
+    const subscription = BackHandler.addEventListener('hardwareBackPress', backHandler);
+    return () => {
+      if (subscription && typeof subscription.remove === 'function') {
+        subscription.remove();
+      }
+    };
   }, [enabled, callback]);
 }
